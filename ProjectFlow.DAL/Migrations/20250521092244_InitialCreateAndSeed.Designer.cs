// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectFlow.DAL.Data;

#nullable disable

namespace ProjectFlow.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250521092244_InitialCreateAndSeed")]
    partial class InitialCreateAndSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectFlow.DAL.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Alpha project",
                            Name = "Project A"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Beta project",
                            Name = "Project B"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Gamma project",
                            Name = "Project C"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Delta project",
                            Name = "Project D"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Epsilon project",
                            Name = "Project E"
                        });
                });

            modelBuilder.Entity("ProjectFlow.DAL.Entities.ProjectMember", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMembers");

                    b.HasData(
                        new
                        {
                            UserId = "u1",
                            ProjectId = 1
                        },
                        new
                        {
                            UserId = "u2",
                            ProjectId = 1
                        },
                        new
                        {
                            UserId = "u3",
                            ProjectId = 2
                        },
                        new
                        {
                            UserId = "u4",
                            ProjectId = 3
                        },
                        new
                        {
                            UserId = "u5",
                            ProjectId = 4
                        });
                });

            modelBuilder.Entity("ProjectFlow.DAL.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bug"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Feature"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low Priority"
                        },
                        new
                        {
                            Id = 5,
                            Name = "UI"
                        });
                });

            modelBuilder.Entity("ProjectFlow.DAL.Entities.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks", t =>
                        {
                            t.HasCheckConstraint("CK_TaskItem_Priority", "[Priority] IN ('Low', 'Normal', 'High', 'Critical')");

                            t.HasCheckConstraint("CK_TaskItem_Status", "[Status] IN ('Pending', 'InProgress', 'Completed', 'Archived')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 9, 22, 44, 276, DateTimeKind.Utc).AddTicks(3058),
                            CreatedById = "u1",
                            Description = "Initialize git repository",
                            Priority = "Normal",
                            ProjectId = 1,
                            Status = "Pending",
                            Title = "Setup repo"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 9, 22, 44, 276, DateTimeKind.Utc).AddTicks(3060),
                            CreatedById = "u2",
                            Description = "ER diagram for project",
                            Priority = "High",
                            ProjectId = 2,
                            Status = "InProgress",
                            Title = "Design database"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 21, 9, 22, 44, 276, DateTimeKind.Utc).AddTicks(3062),
                            CreatedById = "u3",
                            Description = "Add JWT and Identity",
                            Priority = "Critical",
                            ProjectId = 3,
                            Status = "Completed",
                            Title = "Implement auth"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 21, 9, 22, 44, 276, DateTimeKind.Utc).AddTicks(3064),
                            CreatedById = "u4",
                            Description = "React + Tailwind layout",
                            Priority = "Low",
                            ProjectId = 4,
                            Status = "Pending",
                            Title = "Frontend UI"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 21, 9, 22, 44, 276, DateTimeKind.Utc).AddTicks(3066),
                            CreatedById = "u5",
                            Description = "Unit + Integration tests",
                            Priority = "Normal",
                            ProjectId = 5,
                            Status = "Archived",
                            Title = "Test cases"
                        });
                });

            modelBuilder.Entity("ProjectFlow.DAL.Entities.TaskItemTag", b =>
                {
                    b.Property<int>("TaskItemId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("TaskItemId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TaskItemTags");

                    b.HasData(
                        new
                        {
                            TaskItemId = 1,
                            TagId = 2
                        },
                        new
                        {
                            TaskItemId = 1,
                            TagId = 1
                        },
                        new
                        {
                            TaskItemId = 2,
                            TagId = 3
                        },
                        new
                        {
                            TaskItemId = 3,
                            TagId = 5
                        },
                        new
                        {
                            TaskItemId = 4,
                            TagId = 4
                        });
                });

            modelBuilder.Entity("ProjectFlow.DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "u1",
                            Email = "alice@example.com",
                            Password = "pass1",
                            Role = "User",
                            Username = "alice"
                        },
                        new
                        {
                            Id = "u2",
                            Email = "bob@example.com",
                            Password = "pass2",
                            Role = "User",
                            Username = "bob"
                        },
                        new
                        {
                            Id = "u3",
                            Email = "charlie@example.com",
                            Password = "pass3",
                            Role = "Admin",
                            Username = "charlie"
                        },
                        new
                        {
                            Id = "u4",
                            Email = "dave@example.com",
                            Password = "pass4",
                            Role = "User",
                            Username = "dave"
                        },
                        new
                        {
                            Id = "u5",
                            Email = "eve@example.com",
                            Password = "pass5",
                            Role = "User",
                            Username = "eve"
                        });
                });

            modelBuilder.Entity("ProjectFlow.DAL.Entities.ProjectMember", b =>
                {
                    b.HasOne("ProjectFlow.DAL.Entities.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectFlow.DAL.Entities.User", "User")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectFlow.DAL.Entities.TaskItem", b =>
                {
                    b.HasOne("ProjectFlow.DAL.Entities.User", "CreatedBy")
                        .WithMany("Tasks")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectFlow.DAL.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectFlow.DAL.Entities.TaskItemTag", b =>
                {
                    b.HasOne("ProjectFlow.DAL.Entities.Tag", "Tag")
                        .WithMany("TaskItemTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectFlow.DAL.Entities.TaskItem", "TaskItem")
                        .WithMany("TaskItemTags")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("ProjectFlow.DAL.Entities.Project", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ProjectFlow.DAL.Entities.Tag", b =>
                {
                    b.Navigation("TaskItemTags");
                });

            modelBuilder.Entity("ProjectFlow.DAL.Entities.TaskItem", b =>
                {
                    b.Navigation("TaskItemTags");
                });

            modelBuilder.Entity("ProjectFlow.DAL.Entities.User", b =>
                {
                    b.Navigation("ProjectMemberships");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
